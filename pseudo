def wait_for_start():
    while CdS cell is not bright:
        wait
    return


function turn(angle):
    while(heading is not close enough to angle):
        if(heading > angle):
            try to turn CCW to angle with shaft encoder
        else:
            try to turn CW to angle with shaft encoder
    return


function drive_to(x,y):
    stop motors
    do:
        determine angle to (x,y)
        determine distance to (x,y)

        if(heading is within 10 degrees of angle):
            drive straight ahead
        elif(heading is within 45 degrees of angle):
            if(heading > angle):
                drive with more power to left motor to compensate
            else:
                drive with more power to right motor to compensate
        else:
            turn to angle, using turn function

    while(distance > epsilon)


function align_with_metal_strip(angle):
//Align to the given angle, with the assistance of a metal strip
//As a precondition, the robot must start above the strip

    //First, make sure we're facing approximately towards angle
    while(heading is not within 10 degrees of angle):
        determine if the robot should turn CW or CCW
        if CW:
            while heading is not within 10 degrees:
                pivot right until the right optosensor loses the metal
                back straight up until the left optosensor loses the metal
        else:
            while heading is not within 10 degrees:
                pivot left until the left optosensor loses the metal
                back straight up until the right optosensor loses the metal

    //Now we're facing (approximately) toward angle.  Just follow the metal.
    //If one optosensor loses the metal, then the robot should turn so it's back on.
    //If both lose the metal, then the robot is at the end of the metal strip
    while(either optosensor sees metal):
        if (only the left optosensor sees metal) or
                (angle from heading to target angle > 0):
            drive with more power to the right motor to compensate
        elif (only the right optosensor sees metal) or
                (angle from heading to target angle < 0):
            drive with more power to the left motor to compensate
        else:
            drive with equal power to both motors

    return


function detect_light_color():
    //In lab 1, it was found that a CdS sensor with a red filter can distinguish between
    //red, blue, and no light.  The values read from the sensor look like:
    //  Red  - 3
    //  Blue - 25
    //  None - 70
    Using the red filter, distinguish between red, blue, and no light.
    return red, blue, or none


function forward_by_inches(inches):
//Drive forward a given number of inches

    if inches < 0, drive backwards instead
    determine number of transitions needed by each shaft encoder (about 5.1 transitions per inch)
    while(more transitions are needed):
        if the right side needs more transitions than the left:
            drive with more power to the right motor
        elif the left side needs more transitions then the right:
            drive with more power to the left motor
        else:
            drive with equal power to both motors
    return


function pick_up_corn():
//Precondition: robot is aligned at end of metal strip, facing directly toward 90 degrees
    activate servo to raise corn arm, picking up corn
    return


function lower_corn():
    lower servo to drop corn
    return


function drop_hay_bale():
//Precondition: robot is lined up with hay bale elevator
    activate motor to push hay bale off robot
    wait until hay bale has fallen
    return

function hookup_with_wagon():
    //Drive forward to connect to wagon
    forward_by_inches(2)
