/**
 * @file drive.ic
 * @brief Driving code.  This includes the curving code, code to pull the wagon back to the start area, and other general purpose driving code.
 * @author Andrew Krieger and Joel Friedly
 * @date 4/25/2011
 */

#use "defines.ic"
#use "drive.ic"
#use "servo/exp_servo_lib.ic"
#use "servo/exp_servo_calibrate.ic"
#use "CdS.ic"
#use "line.ic"
#use "turn-slow.ic"
#use "turn.ic"
#use "step.ic"
#use "gps.ic"
#use "line.ic"


/**
 * @brief Drive up the hill
 *
 * Assume that the robot starts facing approximately north, in the starting
 * area.  This code angles to the right upo the hill, using the right wall
 * switch to detect the wall.  By hugging the wall, the robot avoids getting
 * caught in the tilled field.
 */
int drive_up_hill() {
    //number of cycles for which the tested optosensors are over something shiny
    //The sensors will occasionally return low numbers when over a screw in the course
    // And sometimes
    int shiny_ctr;
    
    printf("Going up hill\n");
    
    //Drive across the bumps and up the hill - angle right when off wall
    motor(MOTOR_LEFT, 100);
    reset_system_time();
    while(shiny_ctr < SHINY_TIME && !start_button() && mseconds() < 7000L) {
        //If the switch is pressed, go straight.  Otherwise angle right.
        if(digital(SWITCH_WALL_RIGHT))
          motor(MOTOR_RIGHT,100);
        else
          motor(MOTOR_RIGHT, 90);
        
        //Check the optos
        if(myanalog(OPTO_FRONT_RIGHT) < OPTO_THRESHOLD && myanalog(OPTO_FRONT_LEFT) < OPTO_THRESHOLD) {
            ++shiny_ctr;
        } else {
            shiny_ctr = 0;
        }
    }
    
    if(mseconds() >= 7000L)
      return 1;
    
    printf("Front on shiny\n");
    //Go straight (ish) until the front sensors are off the shiny
    motor(MOTOR_RIGHT, 100);
    reset_system_time();
    while((myanalog(OPTO_FRONT_LEFT) < OPTO_THRESHOLD || myanalog(OPTO_FRONT_RIGHT) < OPTO_THRESHOLD) && !start_button() && mseconds() < 500L)
      ;
    
    printf("Looking for back\n");
    //Go straight (ish) until the rear optos are on the shiny
    shiny_ctr = 0;
    reset_system_time();
    while(shiny_ctr < SHINY_TIME && !start_button() && mseconds() < 1500L) {
        if(myanalog(OPTO_BACK_RIGHT) < OPTO_THRESHOLD && myanalog(OPTO_BACK_LEFT) < OPTO_THRESHOLD) {
            ++shiny_ctr;
        } else {
            shiny_ctr = 0;
        }
    }
    
    //Stop
    ao();    
    return 0;
}


/**
 * @brief Return to start area from hill
 *
 * Assume that the robot starts facing south, above the start area.
 * This code drives approximately straight, only angling a bit to the
 * right in order to hug the wall.
 * This code also takes care of pushing the END BUTTON.
 */
void drive_down_hill() {
    int i;
    
    printf("Going down hill\n");
    
    //Drive across the bumps and up the hill - angle right when off wall
    motor(MOTOR_RIGHT, 100);
    reset_system_time();
    while(mseconds() < 30000L) {
        //If the switch is pressed, go straight.  Otherwise angle right.
        if(digital(SWITCH_WALL_LEFT))
          motor(MOTOR_LEFT,100);
        else
          motor(MOTOR_LEFT, 80);
    }
    
    for(;;) {
        motor(MOTOR_LEFT, -100);
        motor(MOTOR_RIGHT, -100);
        msleep(250L);
        motor(MOTOR_LEFT, 100);
        motor(MOTOR_RIGHT, 100);
        msleep(1000L);
    }
    
}


/**
 * @brief Drive backwards to reach a metal strip.
 *
 * @param go_to_front Set to nonzero to continue driving backwards until the front optos are on a strip
 * @param timeout The maximum number of miliseconds to run
 *
 * Drives straight back using shaft encoders until a metal strip is found.
 * If go_to_front is nonzero, then this will end with the front opotsensors
 * on a strip (unless the timeout is reached, of course).  If go_to_front is zero,
 * then this function will return with the back optos on a line.
 */
void drive_back_to_shiny(int go_to_front, long timeout) {
    int shiny_ctr = 0;
    int high_water = 0;
    
    printf("Where's the shiny? Backward\n");
    
    reset_system_time();
    SHAFT_LEFT_COUNT = SHAFT_RIGHT_COUNT = 0;
    
    while(shiny_ctr < SHINY_TIME && !stop_button() && mseconds() < timeout) {
        if(myanalog(OPTO_BACK_LEFT) < OPTO_THRESHOLD && myanalog(OPTO_BACK_RIGHT) < OPTO_THRESHOLD) {
            ++shiny_ctr;
        } else {
            shiny_ctr = 0;
        }
        
        step_straight_back(3);
    }
    
    if(go_to_front) {
        int l,r;
        
        l=r=-1;
        
        printf("Going til back off\n");
        //Continue until the back optos are off of the shiny
        SHAFT_LEFT_COUNT = SHAFT_RIGHT_COUNT = 0;
        while((myanalog(OPTO_BACK_LEFT) < OPTO_THRESHOLD || myanalog(OPTO_BACK_RIGHT) < OPTO_THRESHOLD) && mseconds() < timeout)
          step_straight_back(3);
        
        ao();
        
        printf("Finding front optos\n");
        SHAFT_LEFT_COUNT = SHAFT_RIGHT_COUNT = 0;
        shiny_ctr = 0;
        while(shiny_ctr < SHINY_TIME && mseconds() < timeout) {
            if(l!=myanalog(OPTO_FRONT_LEFT) || r!=myanalog(OPTO_FRONT_RIGHT)) {
                l = myanalog(OPTO_FRONT_LEFT);
                r = myanalog(OPTO_FRONT_RIGHT);
                printf("%d %d\n", l, r);
            }
            
            if(myanalog(OPTO_FRONT_LEFT) < OPTO_THRESHOLD && myanalog(OPTO_FRONT_RIGHT) < OPTO_THRESHOLD) {
                ++shiny_ctr;
            } else {
                shiny_ctr = 0;
            }
            
            step_straight_back(3);
        }
        
        printf("Found front optos: %d %d\n", myanalog(OPTO_FRONT_LEFT), myanalog(OPTO_FRONT_RIGHT));
    }
    
    ao();
}


/**
 * @brief Drive forwards to reach a metal strip.
 *
 * @param timeout The maximum number of miliseconds to run
 *
 * Drives straight forward using shaft encoders until a metal strip is found.
 * If go_to_front is nonzero, then this will end with the front opotsensors
 * on a strip (unless the timeout is reached, of course).  If go_to_front is zero,
 * then this function will return with the back optos on a line.
 */
void drive_forward_to_shiny(int go_to_back, long timeout) {
    int shiny_ctr = 0;
    int high_water = 0;
    
    printf("Where's the shiny? Forward\n");
    
    SHAFT_LEFT_COUNT = SHAFT_RIGHT_COUNT = 0;
    
    reset_system_time();
    while(shiny_ctr < SHINY_TIME && !stop_button() && mseconds() < timeout) {        
        printf("%d %d\n", myanalog(OPTO_FRONT_LEFT), myanalog(OPTO_FRONT_RIGHT));
        if(myanalog(OPTO_FRONT_LEFT) < OPTO_THRESHOLD && myanalog(OPTO_FRONT_RIGHT) < OPTO_THRESHOLD) {
            ++shiny_ctr;
        } else {
            shiny_ctr = 0;
        }
        
        step_straight_forward(4);
    }
    ao();
    
    if(go_to_back) {
        //Continue until the back optos are off of the shiny
        SHAFT_LEFT_COUNT = SHAFT_RIGHT_COUNT = 0;
        while((myanalog(OPTO_BACK_LEFT) < OPTO_THRESHOLD || myanalog(OPTO_BACK_RIGHT) < OPTO_THRESHOLD) && mseconds() < timeout)
          step_straight_forward(4);
        
        SHAFT_LEFT_COUNT = SHAFT_RIGHT_COUNT = 0;
        shiny_ctr = 0;
        while(shiny_ctr < SHINY_TIME && !stop_button() && mseconds() < timeout) {
            if(myanalog(OPTO_BACK_LEFT) < OPTO_THRESHOLD && myanalog(OPTO_BACK_RIGHT) < OPTO_THRESHOLD) {
                ++shiny_ctr;
            } else {
                shiny_ctr = 0;
            }
            
            step_straight_forward(4);
        }
        
        ao();
    } else {
        drive_straight(-1);
    }
}


/**
 * @brief Angle right until a metallic strip is found
 * @deprecated This doesn't use shaft encoders or timeouts.  I also don't think it's used anywhere.
 * It probably shouldn't be.
 * 
 * Run the motors at unequal (but constant) power in order to angle right while
 * travelling forward.  Stop with both fron optosensors on the strip.
 */
void angle_right_to_shiny(int max_dist) {
    int shiny_ctr = 0;
    int sw_disp = -1;
    
    //    printf("Drive to shiny. Angle right\n");
    
    motor(MOTOR_LEFT,  100);
    motor(MOTOR_RIGHT, 100);
    
    SHAFT_LEFT_COUNT = SHAFT_RIGHT_COUNT = 0;
    
    while(shiny_ctr < SHINY_TIME && !stop_button() && SHAFT_LEFT_COUNT + SHAFT_RIGHT_COUNT < max_dist*2) {
        if(analog(OPTO_FRONT_LEFT) < OPTO_THRESHOLD && analog(OPTO_FRONT_RIGHT) < OPTO_THRESHOLD) {
            ++shiny_ctr;
        } else {
            shiny_ctr = 0;
        }
        
        if(digital(SWITCH_WALL_LEFT) != sw_disp)
          printf("Switch: %d\n", sw_disp = digital(SWITCH_WALL_LEFT));
    }
    while(!digital(SWITCH_WALL_LEFT) && SHAFT_LEFT_COUNT + SHAFT_RIGHT_COUNT < max_dist*2)
      ;

    ao();
}


/**
 * @brief Drives backwards until is squares up with a wall by testing the back switches.
 */
void drive_back_to_wall(void) {
    while(!digital(SWITCH_CORN) || !digital(SWITCH_BACK_RIGHT)) {
        if(!digital(SWITCH_CORN))
          motor(MOTOR_LEFT, -100);
        else
          motor(MOTOR_LEFT, 0);
        
        if(!digital(SWITCH_BACK_RIGHT))
          motor(MOTOR_RIGHT, -100);
        else
          motor(MOTOR_RIGHT, 0);
    }
}


/**
 * @brief Pulls the wagon from the barn and back to the start area.
 *
 * All of these values were determined empirically.
 */
void pull_wagon(void) {
    step_treads(3, 3);
    step_treads(0, 12);
    step_treads(10, 10);
    gps_turn(25, 4);
    /*
    step_treads(14, 0);
    step_treads(12, 10);
    step_treads(14, 0);
    
    drive_straight(5);
    turn_slow(30.0);
    gps_turn(30, 4);
    */
    forward_to_wall();
}

void forward_to_wall() {
    while(digital(SWITCH_WALL_LEFT) == 0) {
        motor(MOTOR_LEFT, 100);
        motor(MOTOR_RIGHT,80);
    }
    ao();
}


/**
 * @brief Curves from the hay bale elvator to square up with the fence in front of the wagon strip.
 *
 * Times out after 1.75s.
 */
void curve_to_wagon() {
    /*int shiny_ctr = 0;
    
    step_treads(3,3);
    
    turn(-30.0);
    gps_turn(15, 4);
    
    drive_straight(40);
    
    step_treads(-10,-10);
    turn(-30.0);
    gps_turn(135, 4);
    drive_back_to_shiny(0, 2000L);*/
    reset_system_time();
    motor(MOTOR_RIGHT, 75);
    motor(MOTOR_LEFT, 100);
    while(mseconds() < 1750L)
      ;
    motor(MOTOR_RIGHT, 0);
    while(mseconds() < 2250L)
      ;
    ao();
	// motors need love too
    sleep(0.05);  
    
    // aligned with fence, go to strip now
    step_treads(-10,-10);
    turn(-30.0);
    gps_turn(150, 4);
    drive_back_to_shiny(0, 2000L);
}


/**
 * @brief Does what it says, it drives straight for a number of shaft encoder counts.
 * @param trans Number of encoder counts to do before exiting.
 *
 * Has a built-in system to auto correct the robot's path if the two shaft are ever off by even a single count.
 * This part grows in power as the shaft counts disparity increases.
 * Times out after 5s.
 */
void drive_straight(int trans) {
    int dir;
    int low_pwr;
    int diff;
    
    if(trans == 0)
      return;
    
    dir = trans / abs(trans);
    
    //Set trans = 2*abs(trans), so we can drive until avg(left, right) < trans   <=>    left+right < 2*trans
    trans = abs(trans);
    trans += trans;
    
    reset_system_time();
    SHAFT_LEFT_COUNT = SHAFT_RIGHT_COUNT = 0;
    
    while(SHAFT_LEFT_COUNT + SHAFT_RIGHT_COUNT < trans && mseconds() < 5000L) {
        diff = abs(SHAFT_LEFT_COUNT - SHAFT_RIGHT_COUNT);
        if(diff > 5)
          low_pwr = 0;
        else if(diff > 3)
          low_pwr = 60;
        else if(diff > 1)
          low_pwr = 80;
        else
          low_pwr = 100;
        
        if(SHAFT_LEFT_COUNT > SHAFT_RIGHT_COUNT) {
            motor(MOTOR_LEFT, dir * low_pwr);
            motor(MOTOR_RIGHT, dir * 100);
        } else {
            motor(MOTOR_LEFT, dir * 100);
            motor(MOTOR_RIGHT, dir * low_pwr);
        }
    }
    
    ao();
}

