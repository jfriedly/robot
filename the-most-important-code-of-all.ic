#use "util.ic"

persistent int play;

int bpm = 62;

void decode_note(int code, int *note, int *octave, int *sharp, int *len) {
    *note = code & 0x7;
    *octave = (code >> 3) & 0xF;
    *sharp = (code >> 7) & 0x1;
    *len = code >> 8;
}


// note - 0..7
// octave - 0 .. 8
// sharp - boolean
/*
float note_to_freq(int note, int octave, int sharp) {
    int idx = 12*octave;
    
    idx += offsets[note];
    if(note != 1 && note != 4 && sharp)
      idx++;
    
    return freqs[idx];
}
*/

//                 A  B  C  D  E  F  G
int num_steps[] = {0, 2, 3, 5, 7, 8, 10};

int note_to_steps(int note, int octave, int accidental) {
    return num_steps[note] + accidental + 12*(octave-4);
    
}

float note_to_freq(int note, int octave, int sharp) {
    return (2.0^((float)note_to_steps(note, octave, sharp)/12.0)) * 440.0;
}


float len_to_time(int len) {
    return 60.0 / (float)(4*bpm) * (float)len;
}

void play_note(int note, int octave, int sharp, int len) {
    tone(note_to_freq(note, octave, sharp), 60.0 / (float)(2*bpm) * len_to_time(len));
}


void play_song(int song[]) {
    int note, octave, sharp, len;
    int i;
    
    for(i=0; song[i]; ++i) {
        decode_note(song[i], &note, &octave, &sharp, &len);
        if(note != 7)
          play_note(note, octave, sharp, len);
        else
          msleep((long)round(len_to_time(len)*1000.0));
    }
}


int main() {
    play = !play;
    if(play)
}
