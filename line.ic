#use "defines.ic"
#use "util.ic"
#use "drive.ic"

//Use bitmasks to make it easier to read the sensors
#define BACK_LEFT_BIT   0
#define BACK_RIGHT_BIT  1
#define FRONT_LEFT_BIT  2
#define FRONT_RIGHT_BIT 3

#define BACK_LEFT_MASK   (1<<BACK_LEFT_BIT)
#define BACK_RIGHT_MASK  (1<<BACK_RIGHT_BIT)
#define FRONT_LEFT_MASK  (1<<FRONT_LEFT_BIT)
#define FRONT_RIGHT_MASK (1<<FRONT_RIGHT_BIT)


///Check both front optosensors
int opto_mask_front() {
    return ((analog(OPTO_FRONT_LEFT)  < OPTO_THRESHOLD) <<  FRONT_LEFT_BIT)
      |    ((analog(OPTO_FRONT_RIGHT) < OPTO_THRESHOLD) << FRONT_RIGHT_BIT);
}

///Check both rear optosensors
int opto_mask_back() {
    return ((analog(OPTO_BACK_LEFT)   < OPTO_THRESHOLD) <<   BACK_LEFT_BIT)
      |    ((analog(OPTO_BACK_RIGHT)  < OPTO_THRESHOLD) <<  BACK_RIGHT_BIT);
}

///Check all optosensors
int opto_mask_all() {
    return opto_mask_front() | opto_mask_back();
}

/**
 * @brief Line up with metal strip
 *
 * This is meant to be used to align with the corn.
 * Turn CW and drive straight to align with metal strip.
 */
void align_forward_cw(void) {
    int mask;
    printf("Align forward cw\n");
    
    for(;;) {
        mask = opto_mask_all();
        
        if(mask & BACK_RIGHT_MASK) {
            ao();
            return;
        }
        
        if(mask & FRONT_LEFT_MASK) {
            motor(MOTOR_LEFT, 100);
            motor(MOTOR_RIGHT, -100);
        } else {
            motor(MOTOR_LEFT, 100);
            motor(MOTOR_RIGHT, 100);
        }
    }
}



/**
 * @brief Line up with the metal strip
 *
 * This is meant to be used to align with the wagon.  Put the front optos just off of the metal strip,
 * so that if the robot drove forward, it would be over the strip.  Call this function, and it should
 * align with the strip.
 * Problems: (1) You have to be ~4-5 inches from the end of the strip, or the robot will drive off
 * and get lost.  (2) Doesn't always end with both pairs of sensors straddling the boundary of the strip
 */
void align_back_cw(void) {
    int mask, last;
    printf("Align back cw\n");
    
    for(;;) {
        mask = opto_mask_all();
        
        //        if(mask != last) {
        //            ao();
        //            printf("Switching to %d  ", mask);
        //            print_hex_byte(analog(OPTO_BACK_LEFT)); printf(" ");
        //            print_hex_byte(analog(OPTO_BACK_RIGHT)); printf(" ");
        //            print_hex_byte(analog(OPTO_FRONT_LEFT)); printf(" ");
        //            print_hex_byte(analog(OPTO_FRONT_RIGHT)); printf(" ");
        //            printf("\n");
        //            sleep(0.1);
        //            last = mask;
        //       }
        
        if(mask & BACK_RIGHT_MASK) {
            ao();
            return;
        }
/*
        if(mask & FRONT_RIGHT_MASK ) { //Probably both are on strip; just right is unexpected
            motor(MOTOR_LEFT,  100);
            motor(MOTOR_RIGHT, -100);
        } else 
*/
          if((mask & (FRONT_LEFT_MASK | FRONT_RIGHT_MASK)) == FRONT_LEFT_MASK) {
            motor(MOTOR_LEFT, 100);
            motor(MOTOR_RIGHT, 100);
        } else { //No optos on strip - assume we went off the end and are about lined up
            motor(MOTOR_LEFT, 100);
            motor(MOTOR_RIGHT, -100);
        }
        
    }
}

// Precondition: Front sensors straddling boundary
// Precondition: Back right sensor on line

// This still needs work.  Maybe just try using 1 optosensor code for Monday?

void step_treads(int left, int right) {
    int left_dir = 80, right_dir = 80;
    
    if(left < 0)
      left_dir = -80;
    if(right < 0)
      right_dir = -80;
    
    left = abs(left);
    right = abs(right);
    
    SHAFT_LEFT_COUNT = SHAFT_RIGHT_COUNT = 0;
    
    while(SHAFT_LEFT_COUNT < left || SHAFT_RIGHT_COUNT < right) {
        if(SHAFT_LEFT_COUNT < left)
          motor(MOTOR_LEFT, left_dir);
        else
          motor(MOTOR_LEFT, 0);
        
        if(SHAFT_RIGHT_COUNT < right)
          motor(MOTOR_RIGHT, right_dir);
        else
          motor(MOTOR_RIGHT, 0);
    }
    
    ao();
    //be nice to the motors
    sleep(0.1);
}

void follow_strip_forward(int left_bound) 
{    
    int readingL, readingR;
    
    
    /*
    while(!start_button()) {
        printf("L%d R%d\n", analog(OPTO_FRONT_LEFT), analog(OPTO_FRONT_RIGHT));
        sleep(0.05);
    }
*/  
    reset_system_time();
    //follow along the left boundary
    if(left_bound) //(analog(OPTO_FRONT_LEFT) > OPTO_THRESHOLD) && (analog(OPTO_FRONT_RIGHT) < OPTO_THRESHOLD))
      {
        printf("Left\n");
        while(analog(OPTO_FRONT_RIGHT) < OPTO_THRESHOLD && mseconds() < 7500L)
          {
            readingL=analog(OPTO_FRONT_LEFT);
            if(readingL > OPTO_THRESHOLD)
              {
                motor(MOTOR_LEFT,MOT_PWR);
                readingL=analog(OPTO_FRONT_LEFT);
                
            }
            
            else if(readingL < OPTO_THRESHOLD)
              {
                motor(MOTOR_RIGHT,MOT_PWR);
                readingL=analog(OPTO_FRONT_LEFT);
            }
            
            sleep(0.01);
            ao();
        }
    }
    
    //follow along the right boundary
    else //if((analog(OPTO_FRONT_LEFT) < OPTO_THRESHOLD) && (analog(OPTO_FRONT_RIGHT) > OPTO_THRESHOLD))
      {
        printf("Right\n");
        while(analog(OPTO_FRONT_LEFT) < OPTO_THRESHOLD && mseconds() < 7500L)
          {
            readingR=analog(OPTO_FRONT_RIGHT);
            if(readingR > OPTO_THRESHOLD)
              {
                motor(MOTOR_RIGHT,MOT_PWR);
                readingR=analog(OPTO_FRONT_RIGHT);
                
            }
            
            else if(readingR < OPTO_THRESHOLD)
              {
                motor(MOTOR_LEFT, MOT_PWR);
                readingR=analog(OPTO_FRONT_RIGHT);
            }
            
            sleep(0.01);
            ao();
        }
    }
}

void follow_strip_back(int left) 
{    
    int readingL, readingR;
    
    //follow back along left boundary
    if(left) //(analog(OPTO_BACK_LEFT) > OPTO_THRESHOLD) && (analog(OPTO_BACK_RIGHT) < OPTO_THRESHOLD))
      {
        reset_system_time();
        printf("L%d R%d\n", analog(OPTO_BACK_LEFT), analog(OPTO_BACK_RIGHT));
        while(analog(OPTO_BACK_RIGHT) < OPTO_THRESHOLD && mseconds() < 7500L)
          {
            readingL=analog(OPTO_BACK_LEFT);
            if(readingL > OPTO_THRESHOLD)
              {
                step_treads(-2,0);
                readingL=analog(OPTO_BACK_LEFT);
                
                
            }
            
            else if(readingL < OPTO_THRESHOLD)
              {
                step_treads(0,-2);
                readingL=analog(OPTO_BACK_LEFT);
            }
            
            
            sleep(0.01);
        }
    }
    
    //follow back along right boundary
    else //if((analog(OPTO_BACK_LEFT) < OPTO_THRESHOLD) && (analog(OPTO_BACK_RIGHT) > OPTO_THRESHOLD))
      {
        reset_system_time();
        while(analog(OPTO_BACK_LEFT) < OPTO_THRESHOLD && mseconds() < 7500L)
          {
            readingR=analog(OPTO_BACK_RIGHT);
            if(readingR > OPTO_THRESHOLD)
              {
                motor(MOTOR_RIGHT,-MOT_PWR);
                readingR=analog(OPTO_BACK_LEFT);
                
            }
            
            else if(readingR < OPTO_THRESHOLD)
              {
                motor(MOTOR_LEFT,-MOT_PWR);
                readingR=analog(OPTO_BACK_RIGHT);
            }
            
            sleep(0.01);
            ao();
        }
    }    
}

