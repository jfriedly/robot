/**
 * @file line.ic
 * @brief Code to make the robot drive along the metal lines.
 * @author Andrew Krieger and Joel Friedly
 * @date 5/23/2011
 */

#use "defines.ic"
#use "util.ic"
#use "drive.ic"
#use "servo/exp_servo_lib.ic"
#use "servo/exp_servo_calibrate.ic"
#use "CdS.ic"
#use "line.ic"
#use "turn-slow.ic"
#use "turn.ic"
#use "step.ic"
#use "gps.ic"
#use "line.ic"
#use "log.ic"


//Use bitmasks to make it easier to read the sensors
#define BACK_LEFT_BIT   0
#define BACK_RIGHT_BIT  1
#define FRONT_LEFT_BIT  2
#define FRONT_RIGHT_BIT 3

#define BACK_LEFT_MASK   (1<<BACK_LEFT_BIT)
#define BACK_RIGHT_MASK  (1<<BACK_RIGHT_BIT)
#define FRONT_LEFT_MASK  (1<<FRONT_LEFT_BIT)
#define FRONT_RIGHT_MASK (1<<FRONT_RIGHT_BIT)


///Check both front optosensors
int opto_mask_front() {
    return ((myanalog(OPTO_FRONT_LEFT)  < OPTO_THRESHOLD) <<  FRONT_LEFT_BIT)
      |    ((myanalog(OPTO_FRONT_RIGHT) < OPTO_THRESHOLD) << FRONT_RIGHT_BIT);
}

///Check both rear optosensors
int opto_mask_back() {
    return ((myanalog(OPTO_BACK_LEFT)   < OPTO_THRESHOLD) <<   BACK_LEFT_BIT)
      |    ((myanalog(OPTO_BACK_RIGHT)  < OPTO_THRESHOLD) <<  BACK_RIGHT_BIT);
}

///Check all optosensors
int opto_mask_all() {
    return opto_mask_front() | opto_mask_back();
}

/**
 * @brief Line up with metal strip
 *
 * This is meant to be used to align with the corn.
 * Turn CW and drive straight to align with metal strip.
 */
void align_forward_cw(void) {
    int mask;
    printf("Align forward cw\n");
    
    for(;;) {
        mask = opto_mask_all();
        
        if(mask & BACK_RIGHT_MASK) {
            ao();
            return;
        }
        
        if(mask & FRONT_LEFT_MASK) {
            motor(MOTOR_LEFT, 100);
            motor(MOTOR_RIGHT, -100);
        } else {
            motor(MOTOR_LEFT, 100);
            motor(MOTOR_RIGHT, 100);
        }
    }
}


/**
 * @brief Line up with the metal strip
 *
 * This is meant to be used to align with the wagon.  Put the front optos just off of the metal strip,
 * so that if the robot drove forward, it would be over the strip.  Call this function, and it should
 * align with the strip.
 * Problems: (1) You have to be ~4-5 inches from the end of the strip, or the robot will drive off
 * and get lost.  (2) Doesn't always end with both pairs of sensors straddling the boundary of the strip
 */
void align_back_cw(void) {
    int mask, last;
    printf("Align back cw\n");
    
    for(;;) {
        mask = opto_mask_all();
        if(mask & BACK_RIGHT_MASK) {
            ao();
            return;
        }
        
        if((mask & (FRONT_LEFT_MASK | FRONT_RIGHT_MASK)) == FRONT_LEFT_MASK) {
            motor(MOTOR_LEFT, 100);
            motor(MOTOR_RIGHT, 100);
        } else { //No optos on strip - assume we went off the end and are about lined up
            motor(MOTOR_LEFT, 100);
            motor(MOTOR_RIGHT, -100);
        }
        
    }
}

void follow_strip_forward(int left, long timeout) {
    int i;
    int edge_port = OPTO_FRONT_RIGHT, end_port = OPTO_FRONT_LEFT;
    int on_motor = MOTOR_LEFT, off_motor = MOTOR_RIGHT;
    
    if(left) {
        edge_port = OPTO_FRONT_LEFT;
        end_port = OPTO_FRONT_RIGHT;
        on_motor = MOTOR_RIGHT;
        off_motor = MOTOR_LEFT;
    }
    
    reset_system_time();
    
    log_event(EV_EXTENDED+16, myanalog(end_port));
    log_event(EV_EXTENDED+17, myanalog(edge_port));
    
    for(i=0; i<3; i++) {
        for(;;) {
            while(myanalog(end_port) < OPTO_THRESHOLD && mseconds() < timeout) {
                if(myanalog(edge_port) < OPTO_THRESHOLD) {
                    motor(on_motor, 100);
                    motor(off_motor, -30);
                } else {
                    motor(on_motor, -30);
                    motor(off_motor, 100);
                }
            }
            
            log_event(EV_EXTENDED+24, myanalog(end_port));
            log_event(EV_EXTENDED+25, myanalog(edge_port));
            
            drive_straight(1);
            if(myanalog(end_port) >= OPTO_THRESHOLD || mseconds() >= timeout) {
                log_event(EV_EXTENDED+32, myanalog(end_port));
                log_event(EV_EXTENDED+33, myanalog(edge_port));    
                break;
            }
        }
    }
}

void follow_strip_back(int left) 
{    
    int readingL, readingR;
    
    //follow back along left boundary
    if(left) 
      {
        reset_system_time();
        printf("L%d R%d\n", myanalog(OPTO_BACK_LEFT), myanalog(OPTO_BACK_RIGHT));
        for(;;)
          {
            while(myanalog(OPTO_BACK_RIGHT) < OPTO_THRESHOLD && mseconds() < 7500L)
              {
                readingL=myanalog(OPTO_BACK_LEFT);
                if(readingL > OPTO_THRESHOLD)
                  {
                    motor(MOTOR_LEFT, -100);
                    motor(MOTOR_RIGHT, 0);
                    readingL=myanalog(OPTO_BACK_LEFT);
                }
                
                else //if(readingL < OPTO_THRESHOLD)
                  {
                    motor(MOTOR_LEFT, 0);
                    motor(MOTOR_RIGHT, -100);
                    readingL=myanalog(OPTO_BACK_LEFT);
                }
            }
            
            ao();
            msleep(5L);
            if(myanalog(OPTO_BACK_RIGHT) >= OPTO_THRESHOLD) {
                printf("%d %d\n", myanalog(OPTO_BACK_LEFT), myanalog(OPTO_BACK_RIGHT));
                break;
            }
        }
    }
    
    //follow back along right boundary
    else 
      {
        reset_system_time();
        while(myanalog(OPTO_BACK_LEFT) < OPTO_THRESHOLD && mseconds() < 7500L)
          {
            readingR=myanalog(OPTO_BACK_RIGHT);
            if(readingR > OPTO_THRESHOLD)
              {
                motor(MOTOR_RIGHT,-MOT_PWR);
                readingR=myanalog(OPTO_BACK_LEFT);
                
            }
            
            else if(readingR < OPTO_THRESHOLD)
              {
                motor(MOTOR_LEFT,-MOT_PWR);
                readingR=myanalog(OPTO_BACK_RIGHT);
            }
            
            sleep(0.01);
            ao();
        }
    }    
}

