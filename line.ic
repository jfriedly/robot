#use "defines.ic"
#use "util.ic"
#use "drive.ic"
#use "drive-straight.ic"

//Use bitmasks to make it easier to read the sensors
#define BACK_LEFT_BIT   0
#define BACK_RIGHT_BIT  1
#define FRONT_LEFT_BIT  2
#define FRONT_RIGHT_BIT 3

#define BACK_LEFT_MASK   (1<<BACK_LEFT_BIT)
#define BACK_RIGHT_MASK  (1<<BACK_RIGHT_BIT)
#define FRONT_LEFT_MASK  (1<<FRONT_LEFT_BIT)
#define FRONT_RIGHT_MASK (1<<FRONT_RIGHT_BIT)


///Check both front optosensors
int opto_mask_front() {
    return ((analog(OPTO_FRONT_LEFT)  < OPTO_THRESHOLD) <<  FRONT_LEFT_BIT)
      |    ((analog(OPTO_FRONT_RIGHT) < OPTO_THRESHOLD) << FRONT_RIGHT_BIT);
}

///Check both rear optosensors
int opto_mask_back() {
    return ((analog(OPTO_BACK_LEFT)   < OPTO_THRESHOLD) <<   BACK_LEFT_BIT)
      |    ((analog(OPTO_BACK_RIGHT)  < OPTO_THRESHOLD) <<  BACK_RIGHT_BIT);
}

///Check all optosensors
int opto_mask_all() {
    return opto_mask_front() | opto_mask_back();
}

/**
 * @brief Line up with the metal strip
 *
 * This is meant to be used to align with the wagon.  Put the front optos just off of the metal strip,
 * so that if the robot drove forward, it would be over the strip.  Call this function, and it should
 * align with the strip.
 * Problems: (1) You have to be ~4-5 inches from the end of the strip, or the robot will drive off
 * and get lost.  (2) Doesn't always end with both pairs of sensors straddling the boundary of the strip
 */
void align_back_cw(void) {
    int mask, last;
    printf("Align back cw\n");
    
    for(;;) {
        mask = opto_mask_all();
        
        //        if(mask != last) {
        //            ao();
        //            printf("Switching to %d  ", mask);
        //            print_hex_byte(myanalog(OPTO_BACK_LEFT)); printf(" ");
        //            print_hex_byte(myanalog(OPTO_BACK_RIGHT)); printf(" ");
        //            print_hex_byte(myanalog(OPTO_FRONT_LEFT)); printf(" ");
        //            print_hex_byte(myanalog(OPTO_FRONT_RIGHT)); printf(" ");
        //            printf("\n");
        //            sleep(0.1);
        //            last = mask;
        //       }
        
        if(mask & BACK_RIGHT_MASK) {
            ao();
            return;
        }
        
        if(mask & FRONT_RIGHT_MASK ) { //Probably both are on strip; just right is unexpected
            motor(MOTOR_LEFT,  100);
            motor(MOTOR_RIGHT, -100);
        } else if(mask & FRONT_LEFT_MASK) {
            motor(MOTOR_LEFT, 100);
            motor(MOTOR_RIGHT, 100);
        } else { //No optos on strip - bad - try to go find the strip again
            motor(MOTOR_LEFT, -100);
            motor(MOTOR_RIGHT, 100);
            /*
            SHAFT_LEFT_COUNT = SHAFT_RIGHT_COUNT = 0;
            while(SHAFT_LEFT_COUNT + SHAFT_RIGHT_COUNT < 20)
              step_straight_back();
            turn(30.0);
            drive_forward_to_shiny();
*/
        }
        
    }
}

// Precondition: Front sensors straddling boundary
// Precondition: Back right sensor on line

// This still needs work.  Maybe just try using 1 optosensor code for Monday?

void step_treads(int left, int right) {
    int left_dir = 80, right_dir = 80;
    
    if(left < 0)
      left_dir = -80;
    if(right < 0)
      right_dir = -80;
    
    left = abs(left);
    right = abs(right);
    
    SHAFT_LEFT_COUNT = SHAFT_RIGHT_COUNT = 0;
    
    while(SHAFT_LEFT_COUNT < left || SHAFT_RIGHT_COUNT < right) {
        if(SHAFT_LEFT_COUNT < left)
          motor(MOTOR_LEFT, left_dir);
        else
          motor(MOTOR_LEFT, 0);
        
        if(SHAFT_RIGHT_COUNT < right)
          motor(MOTOR_RIGHT, right_dir);
        else
          motor(MOTOR_RIGHT, 0);
    }
    
    ao();
    //be nice to the motors
    sleep(0.1);
}

void follow_strip_forward() 
{    
    int readingL, readingR;
    
    //follow along the left boundary
    if((myanalog(OPTO_FRONT_LEFT) > OPTO_THRESHOLD) && (myanalog(OPTO_FRONT_RIGHT) < OPTO_THRESHOLD))
      {
        while(myanalog(OPTO_FRONT_RIGHT) < OPTO_THRESHOLD)
          {
            readingL=myanalog(OPTO_FRONT_LEFT);
            if(readingL > OPTO_THRESHOLD)
              {
                motor(MOTOR_LEFT,MOT_PWR);
                readingL=myanalog(OPTO_FRONT_LEFT);
                
            }
            
            else if(readingL < OPTO_THRESHOLD)
              {
                motor(MOTOR_RIGHT,MOT_PWR);
                readingL=myanalog(OPTO_FRONT_LEFT);
            }
            
            sleep(0.01);
            ao();
        }
    }
    
    //follow along the right boundary
    else if((myanalog(OPTO_FRONT_LEFT) < OPTO_THRESHOLD) && (myanalog(OPTO_FRONT_RIGHT) > OPTO_THRESHOLD))
      {
        while(myanalog(OPTO_FRONT_LEFT) < OPTO_THRESHOLD)
          {
            readingR=myanalog(OPTO_FRONT_RIGHT);
            if(readingR > OPTO_THRESHOLD)
              {
                motor(MOTOR_RIGHT,MOT_PWR);
                readingR=myanalog(OPTO_FRONT_RIGHT);
                
            }
            
            else if(readingR < OPTO_THRESHOLD)
              {
                motor(MOTOR_LEFT,MOT_PWR);
                readingR=myanalog(OPTO_FRONT_RIGHT);
            }
            
            sleep(0.01);
            ao();
        }
    }
}

void follow_strip_back() 
{    
    int readingL, readingR;
    
    printf("FSB L%d R%d", myanalog(OPTO_BACK_LEFT), myanalog(OPTO_BACK_RIGHT));
    
    //follow back along left boundary
    if((myanalog(OPTO_BACK_LEFT) > OPTO_THRESHOLD) && (myanalog(OPTO_BACK_RIGHT) < OPTO_THRESHOLD))
      {
        printf(" BL=ON BR=OFF");
        while(myanalog(OPTO_BACK_RIGHT) < OPTO_THRESHOLD)
          {
            readingL=myanalog(OPTO_BACK_LEFT);
            if(readingL > OPTO_THRESHOLD)
              {
                motor(MOTOR_LEFT,-MOT_PWR);
                readingL=myanalog(OPTO_BACK_LEFT);
                
            }
            
            else if(readingL < OPTO_THRESHOLD)
              {
                motor(MOTOR_RIGHT,-MOT_PWR);
                readingL=myanalog(OPTO_BACK_LEFT);
            }
            
            sleep(0.01);
            ao();
        }
    }
    
    //if they're both on, look for the left boundary
    else if(myanalog(OPTO_BACK_LEFT) < OPTO_THRESHOLD && myanalog(OPTO_BACK_RIGHT) < OPTO_THRESHOLD)
      {
        printf("Both sensors on\n");
        press_start();
        while(myanalog(OPTO_BACK_LEFT) < OPTO_THRESHOLD)
          motor(MOTOR_LEFT,-100);
        follow_strip_back();
        
    }
    
    //follow back along right boundary
    else if((myanalog(OPTO_BACK_LEFT) < OPTO_THRESHOLD) && (myanalog(OPTO_BACK_RIGHT) > OPTO_THRESHOLD))
      {
        printf(" BL=OFF BR=ON");
        while(myanalog(OPTO_BACK_LEFT) < OPTO_THRESHOLD)
          {
            readingR=myanalog(OPTO_BACK_RIGHT);
            if(readingR > OPTO_THRESHOLD)
              {
                motor(MOTOR_RIGHT,-MOT_PWR);
                readingR=myanalog(OPTO_BACK_LEFT);
                
            }
            
            else if(readingR < OPTO_THRESHOLD)
              {
                motor(MOTOR_LEFT,-MOT_PWR);
                readingR=myanalog(OPTO_BACK_RIGHT);
            }
            
            sleep(0.01);
            ao();
        }
    }    
}

void find_shiny()
{
    printf("FS\n");
    while(myanalog(OPTO_BACK_RIGHT) > OPTO_THRESHOLD)
      {
        motor(MOTOR_LEFT, -(MOT_PWR-20));
        motor(MOTOR_RIGHT, MOT_PWR-20);
    }
    ao();
}

void align_with_shiny()
{
    while(myanalog(OPTO_BACK_RIGHT) > OPTO_THRESHOLD)
      motor(MOTOR_RIGHT,-100);
    ao();
    
    /*while(myanalog(OPTO_FRONT_LEFT) < OPTO_THRESHOLD || myanalog(OPTO_FRONT_RIGHT) < OPTO_THRESHOLD || myanalog(OPTO_BACK_LEFT) < OPTO_THRESHOLD || myanalog(OPTO_BACK_RIGHT) < OPTO_THRESHOLD)
    {
        while(myanalog(OPTO_FRONT_LEFT) > OPTO_THRESHOLD && myanalog(OPTO_FRONT_RIGHT) > OPTO_THRESHOLD && myanalog(OPTO_BACK_LEFT) < OPTO_THRESHOLD) {
            
            if(myanalog(OPTO_BACK_RIGHT) < OPTO_THRESHOLD) {
                motor(MOTOR_LEFT,  -100);
                motor(MOTOR_RIGHT, 100);
            } else {
                motor(MOTOR_LEFT, -100);
                motor(MOTOR_RIGHT, -100);
            }
            
        }    
    ao();
    if(myanalog(OPTO_FRONT_LEFT) < OPTO_THRESHOLD || myanalog(OPTO_FRONT_RIGHT) < OPTO_THRESHOLD || myanalog(OPTO_BACK_LEFT) < OPTO_THRESHOLD || myanalog(OPTO_BACK_RIGHT) < OPTO_THRESHOLD)    
        return;
    else
        find_shiny();  
    }*/
}

int analog_shiny(int port) {
    return analog(port) < OPTO_THRESHOLD;
}


void back_to_end_of_line(void) {
    long tyme = -1L;
    
    if(!analog_shiny(OPTO_BACK_RIGHT))
      for(;;)
        beep();
    
    reset_system_time();
    //Advance to end of strip
    for(;;) {
        printf("%d %d\n", analog(OPTO_BACK_LEFT), analog(OPTO_BACK_RIGHT));
        if(!analog_shiny(OPTO_BACK_RIGHT)) {
            if(tyme == -1L)
              tyme = mseconds();
            if(mseconds() - tyme > 300L) {
                break;
                //Try turning around in case we just drove off the side if the line
                /*                
                SHAFT_LEFT_COUNT = SHAFT_RIGHT_COUNT = 0;
                while(SHAFT_LEFT_COUNT + SHAFT_RIGHT_COUNT < 12) {
                    beep();
                    if(SHAFT_LEFT_COUNT > SHAFT_RIGHT_COUNT + 3) {
                        motor(MOTOR_LEFT, 0);
                        motor(MOTOR_RIGHT, 100);
                    } else if(SHAFT_LEFT_COUNT > SHAFT_RIGHT_COUNT + 1) {
                        motor(MOTOR_LEFT, -50);
                        motor(MOTOR_RIGHT, 100);
                    } else if(SHAFT_LEFT_COUNT >= SHAFT_RIGHT_COUNT - 1) {
                        motor(MOTOR_LEFT, -100);
                        motor(MOTOR_RIGHT, 100);
                    } else if(SHAFT_LEFT_COUNT >= SHAFT_RIGHT_COUNT - 3) {
                        motor(MOTOR_LEFT, -100);
                        motor(MOTOR_RIGHT, 50);
                    } else {
                        motor(MOTOR_LEFT, -100);
                        motor(MOTOR_RIGHT, 0);
                    }
                    
                    if(analog_shiny(OPTO_BACK_RIGHT))
                      break;
                }
                
                if(SHAFT_LEFT_COUNT + SHAFT_RIGHT_COUNT >= 12) {
                    SHAFT_LEFT_COUNT = SHAFT_RIGHT_COUNT = 0;
                    while(SHAFT_LEFT_COUNT + SHAFT_RIGHT_COUNT < 18) {
                        beep();
                        if(SHAFT_LEFT_COUNT > SHAFT_RIGHT_COUNT + 3) {
                            motor(MOTOR_LEFT, 0);
                            motor(MOTOR_RIGHT, -100);
                        } else if(SHAFT_LEFT_COUNT > SHAFT_RIGHT_COUNT + 1) {
                            motor(MOTOR_LEFT, 50);
                            motor(MOTOR_RIGHT,-100);
                        } else if(SHAFT_LEFT_COUNT >= SHAFT_RIGHT_COUNT - 1) {
                            motor(MOTOR_LEFT,   100);
                            motor(MOTOR_RIGHT, -100);
                        } else if(SHAFT_LEFT_COUNT >= SHAFT_RIGHT_COUNT - 3) {
                            motor(MOTOR_LEFT,  100);
                            motor(MOTOR_RIGHT, -50);
                        } else {
                            motor(MOTOR_LEFT, 100);
                            motor(MOTOR_RIGHT, 0);
                        }
                        
                        if(analog_shiny(OPTO_BACK_RIGHT))
                          break;
                    }
                    
                    if(SHAFT_LEFT_COUNT + SHAFT_RIGHT_COUNT >= 18)
                      break;
                }
*/
            }
        } else
          tyme = -1L;
        if(analog_shiny(OPTO_BACK_LEFT)) {
            step_treads(0, -1);
//            motor(MOTOR_RIGHT, -100);
//            motor(MOTOR_LEFT, 0);
//            sleep(0.01);
        } else {
            step_treads(-2, -1);
//            motor(MOTOR_RIGHT, 0);
//            motor(MOTOR_LEFT, -100);
//            sleep(0.01);
        }
        
    }
    
    ao();
}


#define SLEEPY_TIME 1.0
void align_with_line(void) {
    
}
