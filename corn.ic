#use "drive.ic"
#use "line.ic"
#use "defines.ic"



/**
 * @brief Drive from the starting area (facing west) to the corn area
 */
void start_to_corn(void) {
    int shiny_ctr;
    
    turn(5.0);
    drive_straight(50);
    turn(-50.0);
    gps_turn(45, 4);
    
    SHAFT_LEFT_COUNT = SHAFT_RIGHT_COUNT = 0;
    
    reset_system_time();
    motor(MOTOR_LEFT,  100);
    motor(MOTOR_RIGHT, 100);
    while(!digital(SWITCH_WALL_LEFT) && SHAFT_LEFT_COUNT + SHAFT_RIGHT_COUNT < 220 && mseconds() < 7500L)
      ;
    
    ao();
    msleep(100L);
    turn_cw_to_shiny();
    
    //    step_treads(5, 0);
}


/**
 * @brief Drive from the rightmost corn strip (facing south) to the start area
 *
 * Using empirically determined values, drive back to the starting area.  Start
 * on the middle corn strip, facing (approximately) south.  This function follows
 * that strip, turns toward the starting area (parallel to the bumps), then drives
 * between two bumps back to the start.  It then lines up facing north, ready
 * to transition into drive_up_hill.
 */
void corn_to_start(void) {
    follow_strip_forward(1, 3000L);
    
    drive_straight(13);
    
    turn(45.0);
    gps_turn(40, 4);
    
    drive_straight(95);
    
    turn(60.0);
    
    drive_straight(20);
    turn(90.0);
    gps_turn(0, 4);
}

void check_switch(void) {
    long last = 0L;
    
    for(;;) {
        if(mseconds() - last > 50L) {
            printf("Sw: %d\n", digital(SWITCH_CORN));
            last = mseconds();
        }
        defer();    
    }
}

int test_corn(void) {
    int cds;
    
    follow_strip_forward(1, 3000L);
    
    drive_straight(-2);
    
    cds = analog(CDS_FRONT);
    
    printf("CDS: %d\n", cds);
    
    return cds >= 15;
}

void pick_corn(void) {
    int i, pid;
    
    pid = start_process(check_switch());
    
    drive_straight(-16);
    
    exp_servo_deg(SERVO_CORN, 150);
    msleep(500L);
    
    drive_straight(10);
    
    exp_servo_deg(SERVO_CORN, 30);
    msleep(500L);
    
    for(i=0;i<3;i++) {
        drive_straight(-1);
        exp_servo_deg(SERVO_CORN, 30);
        msleep(250L);
    }
    
    for(i=0;i<2;i++) {
        drive_straight(-15);
        exp_servo_deg(SERVO_CORN, 30);
        msleep(250L);
    }
    
    for(i=0;i<3;i++) {
        turn(45.0);
        msleep(500L);
        
        turn(-45.0);
        msleep(500L);
    }
    
    kill_process(pid);
}

void do_corny_stuff(void) {
    if(test_corn()) {
        pick_corn();
        return;
    }
    
    drive_straight(-33);
    turn(-45.0);
    drive_forward_to_shiny(0, 2000L);
    if(test_corn()) {
        pick_corn();
        return;
    }
    
    drive_straight(-33);
    turn(-45.0);
    drive_forward_to_shiny(0, 2000L);
    
}


/**
 * @brief After picking up left corn, go to middle strip and prepare to return to start
 *
 * Precondition: Robot is approximately at south end of left (westernmost) corn strip, facing
 * roughly northeast.  This should be what the corn picking code does, if called on the west corn.
 * Postcondition: Robot will be on the middle strip, ready to go back to start (facing south).
 */ 
void left_corn_cleanup(void) {
    exp_servo_deg(SERVO_CORN, 0);
    msleep(500L);
    
    turn(45.0);
    gps_turn(0, 4);
    
    for(;;) {
        gps_good_data();
        if(gps_y >= 109)
          break;
        drive_straight(3);
    }
    
    turn(-90.0);
    gps_turn(90, 4);
    
    for(;;) {
        gps_good_data();
        if(gps_x >= -39)
          break;
        drive_straight(2);
    }
    
    turn(-90.0);
    gps_turn(0, 4);
    
}
